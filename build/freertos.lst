ARM GAS  /tmp/ccMuRQYB.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"freertos.c"
  16              		.section	.rodata.str1.4,"aMS",%progbits,1
  17              		.align	2
  18              	.LC0:
  19 0000 696D7554 		.ascii	"imuTask\000"
  19      61736B00 
  20              		.align	2
  21              	.LC2:
  22 0008 6C656400 		.ascii	"led\000"
  23              		.text
  24              	.Ltext0:
  25              		.cfi_sections	.debug_frame
  26              		.section	.text.vApplicationGetIdleTaskMemory,"ax",%progbits
  27              		.align	1
  28              		.p2align 2,,3
  29              		.global	vApplicationGetIdleTaskMemory
  30              		.syntax unified
  31              		.thumb
  32              		.thumb_func
  34              	vApplicationGetIdleTaskMemory:
  35              	.LVL0:
  36              	.LFB240:
  37              		.file 1 "Core/Src/freertos.c"
   1:Core/Src/freertos.c **** /* USER CODE BEGIN Header */
   2:Core/Src/freertos.c **** /**
   3:Core/Src/freertos.c ****   ******************************************************************************
   4:Core/Src/freertos.c ****   * File Name          : freertos.c
   5:Core/Src/freertos.c ****   * Description        : Code for freertos applications
   6:Core/Src/freertos.c ****   ******************************************************************************
   7:Core/Src/freertos.c ****   * @attention
   8:Core/Src/freertos.c ****   *
   9:Core/Src/freertos.c ****   * Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/freertos.c ****   * All rights reserved.
  11:Core/Src/freertos.c ****   *
  12:Core/Src/freertos.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/freertos.c ****   * in the root directory of this software component.
  14:Core/Src/freertos.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/freertos.c ****   *
  16:Core/Src/freertos.c ****   ******************************************************************************
  17:Core/Src/freertos.c ****   */
  18:Core/Src/freertos.c **** /* USER CODE END Header */
  19:Core/Src/freertos.c **** 
  20:Core/Src/freertos.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccMuRQYB.s 			page 2


  21:Core/Src/freertos.c **** #include "FreeRTOS.h"
  22:Core/Src/freertos.c **** #include "task.h"
  23:Core/Src/freertos.c **** #include "main.h"
  24:Core/Src/freertos.c **** #include "cmsis_os.h"
  25:Core/Src/freertos.c **** 
  26:Core/Src/freertos.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/freertos.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/freertos.c **** 
  29:Core/Src/freertos.c **** // #include "microros.h"
  30:Core/Src/freertos.c **** #include "easyflash.h"
  31:Core/Src/freertos.c **** #include "imu.h"
  32:Core/Src/freertos.c **** #include "led_flow_task.h"
  33:Core/Src/freertos.c **** /* USER CODE END Includes */
  34:Core/Src/freertos.c **** 
  35:Core/Src/freertos.c **** /* Private typedef -----------------------------------------------------------*/
  36:Core/Src/freertos.c **** /* USER CODE BEGIN PTD */
  37:Core/Src/freertos.c **** 
  38:Core/Src/freertos.c **** /* USER CODE END PTD */
  39:Core/Src/freertos.c **** 
  40:Core/Src/freertos.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/freertos.c **** /* USER CODE BEGIN PD */
  42:Core/Src/freertos.c **** 
  43:Core/Src/freertos.c **** /* USER CODE END PD */
  44:Core/Src/freertos.c **** 
  45:Core/Src/freertos.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/freertos.c **** /* USER CODE BEGIN PM */
  47:Core/Src/freertos.c **** 
  48:Core/Src/freertos.c **** /* USER CODE END PM */
  49:Core/Src/freertos.c **** 
  50:Core/Src/freertos.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/freertos.c **** /* USER CODE BEGIN Variables */
  52:Core/Src/freertos.c **** 
  53:Core/Src/freertos.c **** // 用于 OpenOCD 调试 FreeRTOS
  54:Core/Src/freertos.c **** const volatile int uxTopUsedPriority = configMAX_PRIORITIES - 1;
  55:Core/Src/freertos.c **** 
  56:Core/Src/freertos.c **** // osThreadId microrosTaskHandle;
  57:Core/Src/freertos.c **** osThreadId imuTaskHandle;
  58:Core/Src/freertos.c **** osThreadId led_RGB_flow_handle;
  59:Core/Src/freertos.c **** /* USER CODE END Variables */
  60:Core/Src/freertos.c **** // osThreadId defaultTaskHandle;
  61:Core/Src/freertos.c **** /* Private function prototypes -----------------------------------------------*/
  62:Core/Src/freertos.c **** /* USER CODE BEGIN FunctionPrototypes */
  63:Core/Src/freertos.c **** 
  64:Core/Src/freertos.c **** /* USER CODE END FunctionPrototypes */
  65:Core/Src/freertos.c **** 
  66:Core/Src/freertos.c **** // void startDefaultTask(void const * argument);
  67:Core/Src/freertos.c **** 
  68:Core/Src/freertos.c **** extern void MX_USB_DEVICE_Init(void);
  69:Core/Src/freertos.c **** void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */
  70:Core/Src/freertos.c **** 
  71:Core/Src/freertos.c **** /* GetIdleTaskMemory prototype (linked to static allocation support) */
  72:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  73:Core/Src/freertos.c **** 
  74:Core/Src/freertos.c **** /* GetTimerTaskMemory prototype (linked to static allocation support) */
  75:Core/Src/freertos.c **** void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTa
  76:Core/Src/freertos.c **** 
  77:Core/Src/freertos.c **** /* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
ARM GAS  /tmp/ccMuRQYB.s 			page 3


  78:Core/Src/freertos.c **** static StaticTask_t xIdleTaskTCBBuffer;
  79:Core/Src/freertos.c **** static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  80:Core/Src/freertos.c **** 
  81:Core/Src/freertos.c **** void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskS
  82:Core/Src/freertos.c **** {
  38              		.loc 1 82 1 view -0
  39              		.cfi_startproc
  40              		@ args = 0, pretend = 0, frame = 0
  41              		@ frame_needed = 0, uses_anonymous_args = 0
  42              		@ link register save eliminated.
  83:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  43              		.loc 1 83 3 view .LVU1
  44              		.loc 1 83 25 is_stmt 0 view .LVU2
  45 0000 044B     		ldr	r3, .L4
  46 0002 0360     		str	r3, [r0]
  84:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  47              		.loc 1 84 3 is_stmt 1 view .LVU3
  82:Core/Src/freertos.c ****   *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  48              		.loc 1 82 1 is_stmt 0 view .LVU4
  49 0004 10B4     		push	{r4}
  50              		.cfi_def_cfa_offset 4
  51              		.cfi_offset 4, -4
  85:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  52              		.loc 1 85 25 view .LVU5
  53 0006 8023     		movs	r3, #128
  84:Core/Src/freertos.c ****   *ppxIdleTaskStackBuffer = &xIdleStack[0];
  54              		.loc 1 84 27 view .LVU6
  55 0008 034C     		ldr	r4, .L4+4
  56 000a 0C60     		str	r4, [r1]
  57              		.loc 1 85 3 is_stmt 1 view .LVU7
  86:Core/Src/freertos.c ****   /* place for user code */
  87:Core/Src/freertos.c **** }
  58              		.loc 1 87 1 is_stmt 0 view .LVU8
  59 000c 5DF8044B 		ldr	r4, [sp], #4
  60              		.cfi_restore 4
  61              		.cfi_def_cfa_offset 0
  85:Core/Src/freertos.c ****   *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
  62              		.loc 1 85 25 view .LVU9
  63 0010 1360     		str	r3, [r2]
  64              		.loc 1 87 1 view .LVU10
  65 0012 7047     		bx	lr
  66              	.L5:
  67              		.align	2
  68              	.L4:
  69 0014 00000000 		.word	.LANCHOR0
  70 0018 00000000 		.word	.LANCHOR1
  71              		.cfi_endproc
  72              	.LFE240:
  74              		.section	.text.vApplicationGetTimerTaskMemory,"ax",%progbits
  75              		.align	1
  76              		.p2align 2,,3
  77              		.global	vApplicationGetTimerTaskMemory
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  82              	vApplicationGetTimerTaskMemory:
  83              	.LVL1:
ARM GAS  /tmp/ccMuRQYB.s 			page 4


  84              	.LFB241:
  88:Core/Src/freertos.c **** /* USER CODE END GET_IDLE_TASK_MEMORY */
  89:Core/Src/freertos.c **** 
  90:Core/Src/freertos.c **** /* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
  91:Core/Src/freertos.c **** static StaticTask_t xTimerTaskTCBBuffer;
  92:Core/Src/freertos.c **** static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  93:Core/Src/freertos.c **** 
  94:Core/Src/freertos.c **** void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTa
  95:Core/Src/freertos.c **** {
  85              		.loc 1 95 1 is_stmt 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  96:Core/Src/freertos.c ****   *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  90              		.loc 1 96 3 view .LVU12
  91              		.loc 1 96 26 is_stmt 0 view .LVU13
  92 0000 054B     		ldr	r3, .L8
  93 0002 0360     		str	r3, [r0]
  97:Core/Src/freertos.c ****   *ppxTimerTaskStackBuffer = &xTimerStack[0];
  94              		.loc 1 97 3 is_stmt 1 view .LVU14
  95:Core/Src/freertos.c ****   *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  95              		.loc 1 95 1 is_stmt 0 view .LVU15
  96 0004 10B4     		push	{r4}
  97              		.cfi_def_cfa_offset 4
  98              		.cfi_offset 4, -4
  98:Core/Src/freertos.c ****   *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
  99              		.loc 1 98 26 view .LVU16
 100 0006 4FF48073 		mov	r3, #256
  97:Core/Src/freertos.c ****   *ppxTimerTaskStackBuffer = &xTimerStack[0];
 101              		.loc 1 97 28 view .LVU17
 102 000a 044C     		ldr	r4, .L8+4
 103 000c 0C60     		str	r4, [r1]
 104              		.loc 1 98 3 is_stmt 1 view .LVU18
  99:Core/Src/freertos.c ****   /* place for user code */
 100:Core/Src/freertos.c **** }
 105              		.loc 1 100 1 is_stmt 0 view .LVU19
 106 000e 5DF8044B 		ldr	r4, [sp], #4
 107              		.cfi_restore 4
 108              		.cfi_def_cfa_offset 0
  98:Core/Src/freertos.c ****   *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 109              		.loc 1 98 26 view .LVU20
 110 0012 1360     		str	r3, [r2]
 111              		.loc 1 100 1 view .LVU21
 112 0014 7047     		bx	lr
 113              	.L9:
 114 0016 00BF     		.align	2
 115              	.L8:
 116 0018 00000000 		.word	.LANCHOR2
 117 001c 00000000 		.word	.LANCHOR3
 118              		.cfi_endproc
 119              	.LFE241:
 121              		.section	.text.MX_FREERTOS_Init,"ax",%progbits
 122              		.align	1
 123              		.p2align 2,,3
 124              		.global	MX_FREERTOS_Init
 125              		.syntax unified
ARM GAS  /tmp/ccMuRQYB.s 			page 5


 126              		.thumb
 127              		.thumb_func
 129              	MX_FREERTOS_Init:
 130              	.LFB242:
 101:Core/Src/freertos.c **** /* USER CODE END GET_TIMER_TASK_MEMORY */
 102:Core/Src/freertos.c **** 
 103:Core/Src/freertos.c **** /**
 104:Core/Src/freertos.c ****   * @brief  FreeRTOS initialization
 105:Core/Src/freertos.c ****   * @param  None
 106:Core/Src/freertos.c ****   * @retval None
 107:Core/Src/freertos.c ****   */
 108:Core/Src/freertos.c **** void MX_FREERTOS_Init(void) {
 131              		.loc 1 108 29 is_stmt 1 view -0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 56
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 109:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 110:Core/Src/freertos.c ****   (void)uxTopUsedPriority;
 135              		.loc 1 110 3 view .LVU23
 108:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 136              		.loc 1 108 29 is_stmt 0 view .LVU24
 137 0000 10B5     		push	{r4, lr}
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 4, -8
 140              		.cfi_offset 14, -4
 141              		.loc 1 110 3 view .LVU25
 142 0002 144B     		ldr	r3, .L12
 111:Core/Src/freertos.c ****   easyflash_init();
 112:Core/Src/freertos.c ****   /* USER CODE END Init */
 113:Core/Src/freertos.c **** 
 114:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 115:Core/Src/freertos.c ****   /* add mutexes, ... */
 116:Core/Src/freertos.c ****   /* USER CODE END RTOS_MUTEX */
 117:Core/Src/freertos.c **** 
 118:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 119:Core/Src/freertos.c ****   /* add semaphores, ... */
 120:Core/Src/freertos.c ****   /* USER CODE END RTOS_SEMAPHORES */
 121:Core/Src/freertos.c **** 
 122:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 123:Core/Src/freertos.c ****   /* start timers, add new ones, ... */
 124:Core/Src/freertos.c ****   /* USER CODE END RTOS_TIMERS */
 125:Core/Src/freertos.c **** 
 126:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 127:Core/Src/freertos.c ****   /* add queues, ... */
 128:Core/Src/freertos.c ****   /* USER CODE END RTOS_QUEUES */
 129:Core/Src/freertos.c **** 
 130:Core/Src/freertos.c ****   /* Create the thread(s) */
 131:Core/Src/freertos.c ****   /* definition and creation of defaultTask */
 132:Core/Src/freertos.c ****   // osThreadDef(microrosTask, &microros_task, osPriorityNormal, 0, 2500);
 133:Core/Src/freertos.c ****   // microrosTaskHandle = osThreadCreate(osThread(microrosTask), NULL);
 134:Core/Src/freertos.c ****   // osThreadDef(defaultTask, startDefaultTask, osPriorityNormal, 0, 128);
 135:Core/Src/freertos.c ****   // defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 136:Core/Src/freertos.c **** 
 137:Core/Src/freertos.c ****   /* USER CODE BEGIN RTOS_THREADS */
 138:Core/Src/freertos.c ****   osThreadDef(imuTask, &imu_task, osPriorityRealtime, 0, 1000);
 143              		.loc 1 138 3 view .LVU26
 144 0004 144C     		ldr	r4, .L12+4
ARM GAS  /tmp/ccMuRQYB.s 			page 6


 110:Core/Src/freertos.c ****   easyflash_init();
 145              		.loc 1 110 3 view .LVU27
 146 0006 1B68     		ldr	r3, [r3]
 111:Core/Src/freertos.c ****   easyflash_init();
 147              		.loc 1 111 3 is_stmt 1 view .LVU28
 108:Core/Src/freertos.c ****   /* USER CODE BEGIN Init */
 148              		.loc 1 108 29 is_stmt 0 view .LVU29
 149 0008 8EB0     		sub	sp, sp, #56
 150              		.cfi_def_cfa_offset 64
 111:Core/Src/freertos.c ****   easyflash_init();
 151              		.loc 1 111 3 view .LVU30
 152 000a FFF7FEFF 		bl	easyflash_init
 153              	.LVL2:
 154              		.loc 1 138 3 is_stmt 1 view .LVU31
 155 000e A646     		mov	lr, r4
 156 0010 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 157 0014 EC46     		mov	ip, sp
 158 0016 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 159 001a 9EE80700 		ldm	lr, {r0, r1, r2}
 160 001e 8CE80700 		stm	ip, {r0, r1, r2}
 139:Core/Src/freertos.c ****   imuTaskHandle = osThreadCreate(osThread(imuTask), NULL);
 161              		.loc 1 139 3 view .LVU32
 162              		.loc 1 139 19 is_stmt 0 view .LVU33
 163 0022 0021     		movs	r1, #0
 164 0024 6846     		mov	r0, sp
 165 0026 FFF7FEFF 		bl	osThreadCreate
 166              	.LVL3:
 167              		.loc 1 139 17 view .LVU34
 168 002a 0C4B     		ldr	r3, .L12+8
 140:Core/Src/freertos.c **** 
 141:Core/Src/freertos.c ****   osThreadDef(led, led_RGB_flow_task, osPriorityNormal, 0, 200);
 169              		.loc 1 141 3 view .LVU35
 170 002c 04F11C0C 		add	ip, r4, #28
 139:Core/Src/freertos.c ****   imuTaskHandle = osThreadCreate(osThread(imuTask), NULL);
 171              		.loc 1 139 17 view .LVU36
 172 0030 1860     		str	r0, [r3]
 173              		.loc 1 141 3 is_stmt 1 view .LVU37
 174 0032 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 175 0036 07AC     		add	r4, sp, #28
 176 0038 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 177 003a 9CE80700 		ldm	ip, {r0, r1, r2}
 178 003e 84E80700 		stm	r4, {r0, r1, r2}
 142:Core/Src/freertos.c ****   led_RGB_flow_handle = osThreadCreate(osThread(led), NULL);
 179              		.loc 1 142 3 view .LVU38
 180              		.loc 1 142 25 is_stmt 0 view .LVU39
 181 0042 0021     		movs	r1, #0
 182 0044 07A8     		add	r0, sp, #28
 183 0046 FFF7FEFF 		bl	osThreadCreate
 184              	.LVL4:
 185              		.loc 1 142 23 view .LVU40
 186 004a 054B     		ldr	r3, .L12+12
 187 004c 1860     		str	r0, [r3]
 143:Core/Src/freertos.c ****   /* USER CODE END RTOS_THREADS */
 144:Core/Src/freertos.c **** 
 145:Core/Src/freertos.c **** }
 188              		.loc 1 145 1 view .LVU41
 189 004e 0EB0     		add	sp, sp, #56
ARM GAS  /tmp/ccMuRQYB.s 			page 7


 190              		.cfi_def_cfa_offset 8
 191              		@ sp needed
 192 0050 10BD     		pop	{r4, pc}
 193              	.L13:
 194 0052 00BF     		.align	2
 195              	.L12:
 196 0054 00000000 		.word	.LANCHOR4
 197 0058 00000000 		.word	.LANCHOR5
 198 005c 00000000 		.word	.LANCHOR6
 199 0060 00000000 		.word	.LANCHOR7
 200              		.cfi_endproc
 201              	.LFE242:
 203              		.global	led_RGB_flow_handle
 204              		.global	imuTaskHandle
 205              		.global	uxTopUsedPriority
 206              		.section	.rodata
 207              		.align	2
 208              		.set	.LANCHOR5,. + 0
 209              	.LC4:
 210 0000 00000000 		.word	.LC0
 211 0004 00000000 		.word	imu_task
 212 0008 0300     		.short	3
 213 000a 0000     		.space	2
 214 000c 00000000 		.word	0
 215 0010 E8030000 		.word	1000
 216 0014 00000000 		.word	0
 217 0018 00000000 		.word	0
 218              	.LC5:
 219 001c 08000000 		.word	.LC2
 220 0020 00000000 		.word	led_RGB_flow_task
 221 0024 0000     		.short	0
 222 0026 0000     		.space	2
 223 0028 00000000 		.word	0
 224 002c C8000000 		.word	200
 225 0030 00000000 		.word	0
 226 0034 00000000 		.word	0
 227              		.section	.bss.imuTaskHandle,"aw",%nobits
 228              		.align	2
 229              		.set	.LANCHOR6,. + 0
 232              	imuTaskHandle:
 233 0000 00000000 		.space	4
 234              		.section	.bss.led_RGB_flow_handle,"aw",%nobits
 235              		.align	2
 236              		.set	.LANCHOR7,. + 0
 239              	led_RGB_flow_handle:
 240 0000 00000000 		.space	4
 241              		.section	.bss.xIdleStack,"aw",%nobits
 242              		.align	2
 243              		.set	.LANCHOR1,. + 0
 246              	xIdleStack:
 247 0000 00000000 		.space	512
 247      00000000 
 247      00000000 
 247      00000000 
 247      00000000 
 248              		.section	.bss.xIdleTaskTCBBuffer,"aw",%nobits
 249              		.align	2
ARM GAS  /tmp/ccMuRQYB.s 			page 8


 250              		.set	.LANCHOR0,. + 0
 253              	xIdleTaskTCBBuffer:
 254 0000 00000000 		.space	84
 254      00000000 
 254      00000000 
 254      00000000 
 254      00000000 
 255              		.section	.bss.xTimerStack,"aw",%nobits
 256              		.align	2
 257              		.set	.LANCHOR3,. + 0
 260              	xTimerStack:
 261 0000 00000000 		.space	1024
 261      00000000 
 261      00000000 
 261      00000000 
 261      00000000 
 262              		.section	.bss.xTimerTaskTCBBuffer,"aw",%nobits
 263              		.align	2
 264              		.set	.LANCHOR2,. + 0
 267              	xTimerTaskTCBBuffer:
 268 0000 00000000 		.space	84
 268      00000000 
 268      00000000 
 268      00000000 
 268      00000000 
 269              		.section	.data.uxTopUsedPriority,"aw"
 270              		.align	2
 271              		.set	.LANCHOR4,. + 0
 274              	uxTopUsedPriority:
 275 0000 06000000 		.word	6
 276              		.text
 277              	.Letext0:
 278              		.file 2 "/opt/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/machine/_default_types.h"
 279              		.file 3 "/opt/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/sys/_stdint.h"
 280              		.file 4 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 281              		.file 5 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 282              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 283              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 284              		.file 8 "easyflash/inc/easyflash.h"
ARM GAS  /tmp/ccMuRQYB.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 freertos.c
     /tmp/ccMuRQYB.s:17     .rodata.str1.4:0000000000000000 $d
     /tmp/ccMuRQYB.s:27     .text.vApplicationGetIdleTaskMemory:0000000000000000 $t
     /tmp/ccMuRQYB.s:34     .text.vApplicationGetIdleTaskMemory:0000000000000000 vApplicationGetIdleTaskMemory
     /tmp/ccMuRQYB.s:69     .text.vApplicationGetIdleTaskMemory:0000000000000014 $d
     /tmp/ccMuRQYB.s:75     .text.vApplicationGetTimerTaskMemory:0000000000000000 $t
     /tmp/ccMuRQYB.s:82     .text.vApplicationGetTimerTaskMemory:0000000000000000 vApplicationGetTimerTaskMemory
     /tmp/ccMuRQYB.s:116    .text.vApplicationGetTimerTaskMemory:0000000000000018 $d
     /tmp/ccMuRQYB.s:122    .text.MX_FREERTOS_Init:0000000000000000 $t
     /tmp/ccMuRQYB.s:129    .text.MX_FREERTOS_Init:0000000000000000 MX_FREERTOS_Init
     /tmp/ccMuRQYB.s:196    .text.MX_FREERTOS_Init:0000000000000054 $d
     /tmp/ccMuRQYB.s:239    .bss.led_RGB_flow_handle:0000000000000000 led_RGB_flow_handle
     /tmp/ccMuRQYB.s:232    .bss.imuTaskHandle:0000000000000000 imuTaskHandle
     /tmp/ccMuRQYB.s:274    .data.uxTopUsedPriority:0000000000000000 uxTopUsedPriority
     /tmp/ccMuRQYB.s:207    .rodata:0000000000000000 $d
     /tmp/ccMuRQYB.s:228    .bss.imuTaskHandle:0000000000000000 $d
     /tmp/ccMuRQYB.s:235    .bss.led_RGB_flow_handle:0000000000000000 $d
     /tmp/ccMuRQYB.s:242    .bss.xIdleStack:0000000000000000 $d
     /tmp/ccMuRQYB.s:246    .bss.xIdleStack:0000000000000000 xIdleStack
     /tmp/ccMuRQYB.s:249    .bss.xIdleTaskTCBBuffer:0000000000000000 $d
     /tmp/ccMuRQYB.s:253    .bss.xIdleTaskTCBBuffer:0000000000000000 xIdleTaskTCBBuffer
     /tmp/ccMuRQYB.s:256    .bss.xTimerStack:0000000000000000 $d
     /tmp/ccMuRQYB.s:260    .bss.xTimerStack:0000000000000000 xTimerStack
     /tmp/ccMuRQYB.s:263    .bss.xTimerTaskTCBBuffer:0000000000000000 $d
     /tmp/ccMuRQYB.s:267    .bss.xTimerTaskTCBBuffer:0000000000000000 xTimerTaskTCBBuffer
     /tmp/ccMuRQYB.s:270    .data.uxTopUsedPriority:0000000000000000 $d

UNDEFINED SYMBOLS
easyflash_init
osThreadCreate
imu_task
led_RGB_flow_task
